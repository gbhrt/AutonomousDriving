[0.028s] Invoking command in '/home/gabriel/software/AutonomousDriving/build/pid_velocity_control': CMAKE_PREFIX_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs:/home/gabriel/software/AutonomousDriving/install/trajectory_following:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control:/home/gabriel/software/AutonomousDriving/install/kia_test:/home/gabriel/software/AutonomousDriving/install/lexus_rx_450h_description:/home/gabriel/software/AutonomousDriving/install/applanix_driver:/opt/ros/galactic LD_LIBRARY_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs/lib:/home/gabriel/software/AutonomousDriving/install/trajectory_following/lib:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib:/home/gabriel/software/AutonomousDriving/install/applanix_driver/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib:/home/gabriel/.mujoco/mujoco200/bin:/home/gabriel/.mujoco/mjpro131/bin:/home/gabriel/.mujoco/mjpro150/bin:/usr/lib/x86_64-linux-gnu/ /usr/bin/cmake /home/gabriel/software/AutonomousDriving/src/pid_velocity_control -DCMAKE_INSTALL_PREFIX=/home/gabriel/software/AutonomousDriving/install/pid_velocity_control
[0.062s] -- The C compiler identification is GNU 9.4.0
[0.095s] -- The CXX compiler identification is GNU 9.4.0
[0.100s] -- Check for working C compiler: /usr/bin/cc
[0.147s] -- Check for working C compiler: /usr/bin/cc -- works
[0.148s] -- Detecting C compiler ABI info
[0.192s] -- Detecting C compiler ABI info - done
[0.204s] -- Detecting C compile features
[0.205s] -- Detecting C compile features - done
[0.207s] -- Check for working CXX compiler: /usr/bin/c++
[0.259s] -- Check for working CXX compiler: /usr/bin/c++ -- works
[0.259s] -- Detecting CXX compiler ABI info
[0.309s] -- Detecting CXX compiler ABI info - done
[0.317s] -- Detecting CXX compile features
[0.317s] -- Detecting CXX compile features - done
[0.318s] -- Found ament_cmake_auto: 1.1.5 (/opt/ros/galactic/share/ament_cmake_auto/cmake)
[0.335s] -- Found PythonInterp: /usr/bin/python3 (found suitable version "3.8.10", minimum required is "3") 
[0.335s] -- Using PYTHON_EXECUTABLE: /usr/bin/python3
[0.450s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[0.454s] -- Found rosidl_adapter: 2.2.1 (/opt/ros/galactic/share/rosidl_adapter/cmake)
[0.505s] -- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found version "1.1.1f")  
[0.524s] -- Found FastRTPS: /opt/ros/galactic/include  
[0.573s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[0.610s] -- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
[0.611s] -- Found rmw_cyclonedds_cpp: 0.22.4 (/opt/ros/galactic/share/rmw_cyclonedds_cpp/cmake)
[0.624s] -- Using RMW implementation 'rmw_cyclonedds_cpp' as default
[0.624s] -- Looking for pthread.h
[0.671s] -- Looking for pthread.h - found
[0.671s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
[0.717s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
[0.717s] -- Looking for pthread_create in pthreads
[0.755s] -- Looking for pthread_create in pthreads - not found
[0.756s] -- Looking for pthread_create in pthread
[0.799s] -- Looking for pthread_create in pthread - found
[0.800s] -- Found Threads: TRUE  
[1.208s] -- Configuring done
[1.219s] -- Generating done
[1.219s] -- Build files have been written to: /home/gabriel/software/AutonomousDriving/build/pid_velocity_control
[1.225s] Invoked command in '/home/gabriel/software/AutonomousDriving/build/pid_velocity_control' returned '0': CMAKE_PREFIX_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs:/home/gabriel/software/AutonomousDriving/install/trajectory_following:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control:/home/gabriel/software/AutonomousDriving/install/kia_test:/home/gabriel/software/AutonomousDriving/install/lexus_rx_450h_description:/home/gabriel/software/AutonomousDriving/install/applanix_driver:/opt/ros/galactic LD_LIBRARY_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs/lib:/home/gabriel/software/AutonomousDriving/install/trajectory_following/lib:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib:/home/gabriel/software/AutonomousDriving/install/applanix_driver/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib:/home/gabriel/.mujoco/mujoco200/bin:/home/gabriel/.mujoco/mjpro131/bin:/home/gabriel/.mujoco/mjpro150/bin:/usr/lib/x86_64-linux-gnu/ /usr/bin/cmake /home/gabriel/software/AutonomousDriving/src/pid_velocity_control -DCMAKE_INSTALL_PREFIX=/home/gabriel/software/AutonomousDriving/install/pid_velocity_control
[1.227s] Invoking command in '/home/gabriel/software/AutonomousDriving/build/pid_velocity_control': CMAKE_PREFIX_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs:/home/gabriel/software/AutonomousDriving/install/trajectory_following:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control:/home/gabriel/software/AutonomousDriving/install/kia_test:/home/gabriel/software/AutonomousDriving/install/lexus_rx_450h_description:/home/gabriel/software/AutonomousDriving/install/applanix_driver:/opt/ros/galactic LD_LIBRARY_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs/lib:/home/gabriel/software/AutonomousDriving/install/trajectory_following/lib:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib:/home/gabriel/software/AutonomousDriving/install/applanix_driver/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib:/home/gabriel/.mujoco/mujoco200/bin:/home/gabriel/.mujoco/mjpro131/bin:/home/gabriel/.mujoco/mjpro150/bin:/usr/lib/x86_64-linux-gnu/ /usr/bin/cmake --build /home/gabriel/software/AutonomousDriving/build/pid_velocity_control -- -j16 -l16
[1.254s] [35m[1mScanning dependencies of target pid_velocity_control[0m
[1.280s] [ 16%] [32mBuilding CXX object CMakeFiles/pid_velocity_control.dir/src/pid_velocity_control_node.cpp.o[0m
[1.280s] [ 33%] [32mBuilding CXX object CMakeFiles/pid_velocity_control.dir/src/pid_velocity_control.cpp.o[0m
[2.482s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:[m[K In constructor â€˜[01m[KPIDvelocityControlNode::PIDvelocityControlNode()[m[Kâ€™:
[2.482s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:54:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.482s]    54 |     this->declare_parameter("kp"[01;35m[K)[m[K;
[2.482s]       |                                 [01;35m[K^[m[K
[2.482s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.482s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.482s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.482s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.482s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.482s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.482s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.482s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:55:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.482s]    55 |     this->declare_parameter("kd"[01;35m[K)[m[K;
[2.482s]       |                                 [01;35m[K^[m[K
[2.483s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.483s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.483s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.483s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.483s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.483s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.483s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.483s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:56:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.483s]    56 |     this->declare_parameter("ki"[01;35m[K)[m[K;
[2.483s]       |                                 [01;35m[K^[m[K
[2.483s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.483s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.483s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.483s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.483s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.483s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.483s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.483s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:57:41:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.483s]    57 |     this->declare_parameter("gain_steps"[01;35m[K)[m[K;
[2.483s]       |                                         [01;35m[K^[m[K
[2.483s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.484s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.484s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.484s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.484s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.484s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.484s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.484s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:77:74:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.484s]    77 | are_parameter("max_throttle_acc"[01;35m[K)[m[K.get<double>();
[2.484s]       |                                 [01;35m[K^[m[K
[2.484s] 
[2.484s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.484s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.484s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.484s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.484s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.484s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.484s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.484s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:78:74:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.484s]    78 | are_parameter("min_throttle_acc"[01;35m[K)[m[K.get<double>();
[2.484s]       |                                 [01;35m[K^[m[K
[2.485s] 
[2.485s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.485s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.485s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.485s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.485s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.485s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.485s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.485s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:79:68:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.485s]    79 | eclare_parameter("max_brake_acc"[01;35m[K)[m[K.get<double>();
[2.485s]       |                                 [01;35m[K^[m[K
[2.485s] 
[2.485s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.485s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.485s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.485s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.485s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.485s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.485s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.485s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:80:68:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.485s]    80 | eclare_parameter("min_brake_acc"[01;35m[K)[m[K.get<double>();
[2.485s]       |                                 [01;35m[K^[m[K
[2.485s] 
[2.485s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.485s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.485s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.485s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.485s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.486s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.486s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.486s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:81:66:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.486s]    81 | declare_parameter("max_throttle"[01;35m[K)[m[K.get<double>();
[2.486s]       |                                 [01;35m[K^[m[K
[2.486s] 
[2.486s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.486s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.486s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.486s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.486s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.486s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.486s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.486s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:82:66:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.486s]    82 | declare_parameter("min_throttle"[01;35m[K)[m[K.get<double>();
[2.486s]       |                                 [01;35m[K^[m[K
[2.486s] 
[2.486s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.486s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.486s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.486s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.486s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.486s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.486s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.486s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:84:69:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.486s]    84 |  declare_parameter("vrx_simulator"[01;35m[K)[m[K.get<bool>();
[2.486s]       |                                   [01;35m[K^[m[K
[2.486s] 
[2.486s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.486s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.487s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.487s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.487s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.487s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.487s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.487s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:85:79:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.487s]    85 | are_parameter("enable_log_to_file"[01;35m[K)[m[K.get<bool>();
[2.487s]       |                                   [01;35m[K^[m[K
[2.487s] 
[2.487s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.487s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.487s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.487s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[2.487s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.487s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.487s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[7.410s] [ 50%] [32m[1mLinking CXX shared library libpid_velocity_control.so[0m
[7.684s] [ 50%] Built target pid_velocity_control
[7.694s] [35m[1mScanning dependencies of target pid_velocity_control_exe[0m
[7.723s] [ 83%] [32mBuilding CXX object CMakeFiles/pid_velocity_control_exe.dir/src/pid_velocity_control_node.cpp.o[0m
[7.723s] [ 83%] [32mBuilding CXX object CMakeFiles/pid_velocity_control_exe.dir/src/pid_velocity_control.cpp.o[0m
[8.982s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:[m[K In constructor â€˜[01m[KPIDvelocityControlNode::PIDvelocityControlNode()[m[Kâ€™:
[8.983s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:54:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.983s]    54 |     this->declare_parameter("kp"[01;35m[K)[m[K;
[8.983s]       |                                 [01;35m[K^[m[K
[8.983s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.983s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.983s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.983s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.983s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.983s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.983s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.983s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:55:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.983s]    55 |     this->declare_parameter("kd"[01;35m[K)[m[K;
[8.983s]       |                                 [01;35m[K^[m[K
[8.983s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.983s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.983s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.983s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.983s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.983s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.983s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.983s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:56:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.983s]    56 |     this->declare_parameter("ki"[01;35m[K)[m[K;
[8.983s]       |                                 [01;35m[K^[m[K
[8.983s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.983s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.984s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.984s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.984s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.984s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.984s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.984s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:57:41:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.984s]    57 |     this->declare_parameter("gain_steps"[01;35m[K)[m[K;
[8.984s]       |                                         [01;35m[K^[m[K
[8.984s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.984s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.984s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.984s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.984s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.984s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.984s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.984s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:77:74:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.984s]    77 | are_parameter("max_throttle_acc"[01;35m[K)[m[K.get<double>();
[8.984s]       |                                 [01;35m[K^[m[K
[8.984s] 
[8.984s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.984s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.984s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.984s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.984s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.984s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.984s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.984s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:78:74:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.984s]    78 | are_parameter("min_throttle_acc"[01;35m[K)[m[K.get<double>();
[8.984s]       |                                 [01;35m[K^[m[K
[8.984s] 
[8.985s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.985s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.985s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.985s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.985s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.985s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.985s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.985s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:79:68:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.985s]    79 | eclare_parameter("max_brake_acc"[01;35m[K)[m[K.get<double>();
[8.985s]       |                                 [01;35m[K^[m[K
[8.985s] 
[8.985s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.985s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.985s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.985s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.985s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.985s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.985s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.985s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:80:68:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.985s]    80 | eclare_parameter("min_brake_acc"[01;35m[K)[m[K.get<double>();
[8.985s]       |                                 [01;35m[K^[m[K
[8.985s] 
[8.985s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.985s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.985s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.985s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.985s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.985s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.985s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.986s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:81:66:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.986s]    81 | declare_parameter("max_throttle"[01;35m[K)[m[K.get<double>();
[8.986s]       |                                 [01;35m[K^[m[K
[8.986s] 
[8.986s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.986s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.986s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.986s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.986s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.986s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.986s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.986s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:82:66:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.986s]    82 | declare_parameter("min_throttle"[01;35m[K)[m[K.get<double>();
[8.986s]       |                                 [01;35m[K^[m[K
[8.986s] 
[8.986s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.986s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.986s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.986s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.986s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.986s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.986s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.986s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:84:69:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.986s]    84 |  declare_parameter("vrx_simulator"[01;35m[K)[m[K.get<bool>();
[8.986s]       |                                   [01;35m[K^[m[K
[8.986s] 
[8.986s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.986s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.986s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.986s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.987s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.987s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.987s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.987s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:85:79:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[8.987s]    85 | are_parameter("enable_log_to_file"[01;35m[K)[m[K.get<bool>();
[8.987s]       |                                   [01;35m[K^[m[K
[8.987s] 
[8.987s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[8.987s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[8.987s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.987s]                  from [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:22[m[K:
[8.987s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[8.987s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[8.987s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[9.134s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:[m[K In member function â€˜[01m[Kvoid PIDvelocityControlNode::on_state(autoware_auto_msgs::msg::VehicleKinematicState_<std::allocator<void> >::SharedPtr)[m[Kâ€™:
[9.134s] [01m[K/home/gabriel/software/AutonomousDriving/src/pid_velocity_control/src/pid_velocity_control_node.cpp:115:12:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kdouble_t[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
[9.134s]   115 |     double [01;35m[Kdouble_t[m[K = rclcpp::Time(msg->header.stamp).seconds() + 0.002;
[9.134s]       |            [01;35m[K^~~~~~~~[m[K
[13.862s] [100%] [32m[1mLinking CXX executable pid_velocity_control_exe[0m
[14.134s] [100%] Built target pid_velocity_control_exe
[14.142s] Invoked command in '/home/gabriel/software/AutonomousDriving/build/pid_velocity_control' returned '0': CMAKE_PREFIX_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs:/home/gabriel/software/AutonomousDriving/install/trajectory_following:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control:/home/gabriel/software/AutonomousDriving/install/kia_test:/home/gabriel/software/AutonomousDriving/install/lexus_rx_450h_description:/home/gabriel/software/AutonomousDriving/install/applanix_driver:/opt/ros/galactic LD_LIBRARY_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs/lib:/home/gabriel/software/AutonomousDriving/install/trajectory_following/lib:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib:/home/gabriel/software/AutonomousDriving/install/applanix_driver/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib:/home/gabriel/.mujoco/mujoco200/bin:/home/gabriel/.mujoco/mjpro131/bin:/home/gabriel/.mujoco/mjpro150/bin:/usr/lib/x86_64-linux-gnu/ /usr/bin/cmake --build /home/gabriel/software/AutonomousDriving/build/pid_velocity_control -- -j16 -l16
[14.162s] Invoking command in '/home/gabriel/software/AutonomousDriving/build/pid_velocity_control': CMAKE_PREFIX_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs:/home/gabriel/software/AutonomousDriving/install/trajectory_following:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control:/home/gabriel/software/AutonomousDriving/install/kia_test:/home/gabriel/software/AutonomousDriving/install/lexus_rx_450h_description:/home/gabriel/software/AutonomousDriving/install/applanix_driver:/opt/ros/galactic LD_LIBRARY_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs/lib:/home/gabriel/software/AutonomousDriving/install/trajectory_following/lib:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib:/home/gabriel/software/AutonomousDriving/install/applanix_driver/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib:/home/gabriel/.mujoco/mujoco200/bin:/home/gabriel/.mujoco/mjpro131/bin:/home/gabriel/.mujoco/mjpro150/bin:/usr/lib/x86_64-linux-gnu/ /usr/bin/cmake --install /home/gabriel/software/AutonomousDriving/build/pid_velocity_control
[14.168s] -- Install configuration: ""
[14.168s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/include
[14.168s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/include/pid_velocity_control
[14.168s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/include/pid_velocity_control/pid_velocity_control.hpp
[14.168s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/environment/library_path.sh
[14.168s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/environment/library_path.dsv
[14.168s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib/libpid_velocity_control.so
[14.172s] -- Set runtime path of "/home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib/libpid_velocity_control.so" to ""
[14.172s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib/pid_velocity_control/pid_velocity_control_exe
[14.175s] -- Set runtime path of "/home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib/pid_velocity_control/pid_velocity_control_exe" to ""
[14.175s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/param
[14.175s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/param/pid.param.yaml
[14.175s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/param/pid_kia.param.yaml
[14.175s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/ament_index/resource_index/package_run_dependencies/pid_velocity_control
[14.175s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/ament_index/resource_index/parent_prefix_path/pid_velocity_control
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/environment/ament_prefix_path.sh
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/environment/ament_prefix_path.dsv
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/environment/path.sh
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/environment/path.dsv
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/local_setup.bash
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/local_setup.sh
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/local_setup.zsh
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/local_setup.dsv
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/package.dsv
[14.176s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/ament_index/resource_index/packages/pid_velocity_control
[14.177s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/cmake/ament_cmake_export_dependencies-extras.cmake
[14.177s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/cmake/ament_cmake_export_include_directories-extras.cmake
[14.177s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/cmake/ament_cmake_export_libraries-extras.cmake
[14.177s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/cmake/pid_velocity_controlConfig.cmake
[14.177s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/cmake/pid_velocity_controlConfig-version.cmake
[14.177s] -- Installing: /home/gabriel/software/AutonomousDriving/install/pid_velocity_control/share/pid_velocity_control/package.xml
[14.182s] Invoked command in '/home/gabriel/software/AutonomousDriving/build/pid_velocity_control' returned '0': CMAKE_PREFIX_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs:/home/gabriel/software/AutonomousDriving/install/trajectory_following:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control:/home/gabriel/software/AutonomousDriving/install/kia_test:/home/gabriel/software/AutonomousDriving/install/lexus_rx_450h_description:/home/gabriel/software/AutonomousDriving/install/applanix_driver:/opt/ros/galactic LD_LIBRARY_PATH=/home/gabriel/software/AutonomousDriving/install/autoware_auto_msgs/lib:/home/gabriel/software/AutonomousDriving/install/trajectory_following/lib:/home/gabriel/software/AutonomousDriving/install/pid_velocity_control/lib:/home/gabriel/software/AutonomousDriving/install/applanix_driver/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib:/home/gabriel/.mujoco/mujoco200/bin:/home/gabriel/.mujoco/mjpro131/bin:/home/gabriel/.mujoco/mjpro150/bin:/usr/lib/x86_64-linux-gnu/ /usr/bin/cmake --install /home/gabriel/software/AutonomousDriving/build/pid_velocity_control
